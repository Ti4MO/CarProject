/*
 * BilProjekt.c
 *
 * Created: 2023-04-05 14:16:34
 * Author : lucas
 */ 

#include <avr/io.h>
#include <util/delay.h>
#define F_CPU 8000000UL

int main(void)
{
	DDRB =0xff;
	timer3_init();

	while (1) {
		
		
			for(int i = 0; i<5; i++){
				// I have not tested these values, just guessed them, so change them if needed. I think we want a
				// range of about 30 degrees in the end. Test by building a board with LEDs connected to the sensor.

				// We don't want delays in the end, we want code that will take the same time to execute instead.
				// The Delays won't be right now tho since i changed the pulse,
				// so you can change them to make the movement of the servo seamless.
				set_pulse(1700);
				_delay_ms(5000);
				set_pulse(1500);
				_delay_ms(5000);
				set_pulse(1300);
				_delay_ms(5000);
				set_pulse(1100);
				_delay_ms(5000);
				set_pulse(1300);
				_delay_ms(5000);
				set_pulse(1500);
				_delay_ms(5000);
			}
		
		
	}
}






void drive_forward(void){
	
	
	
}

void stop(){
	
	
}

void turn_right(int degrees){
	
	
}

void turn_left(int degrees){
	
	
	
}

void drive_backward(){
	// denna funktion ska anropas ifall ett hinder varit på samma plats för länge. Man kan då anta att bilen råkat köra in i skiten och därmed måste backa
	
}

int servo_control(){
	// dela upp sensorns i 4 sektioner
	//läs sensor i varje kvadrant
	
	//om någonting avläses ska siffran för den sektion skickas till funktionerna H - bryggan; turn_right / turn_left
	
	
	
	//return section;
}

int read_sensor(){
	
	if (adc_read() == 1){
		return 1;
	} return 0;
}

void hbrigde_init(){
		
	

}



void timer3_init(){
	
	TCCR3A = 0b10000010;
	TCCR3B = 0b00011010;
	set_pulse(1400);
	set_period(22000);
	
}

void set_pulse(uint16_t pulse){
	//enligt handledning i labb 2, sätter pulsen genom att sätta output compare register till ett värde
	OCR3A = pulse;
}

void set_period(uint16_t period){
	// enligt handledning i labb 2, sätter perioden genom att sätta Input compare register till ett värde
	ICR3 = period;
}





void adc_init(){
	ADCSRA |= (1 << ADEN);
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
	ADMUX |= (1 << REFS0) |(1 << REFS0) ; //referensspänning 
	
	DDRA |= 0b00000001; //koppla till PA0
}


int adc_read(){
	//här måste vi sätta ett register som input
	PRR0 = 0b00000000;	
	ADCSRA |= (1<<ADSC);
	while(ADCSRA&(1<<ADSC)){} //vänta på adc conversionen
	return ADC;
}

//generera avbrott med lagom intervall, med en typ timer. Då ska vi ändra vinkel och läsa input
